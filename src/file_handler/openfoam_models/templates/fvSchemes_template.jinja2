{# Plantilla Jinja2 para el archivo 'fvSchemes' de OpenFOAM #}

ddtSchemes
{
    default     {{ ddtSchemes }};
}

gradSchemes
{
    {%if gradSchemes == '2DPipelineScour'%}
    default         Gauss linear;
    grad(epsilon.b)        cellLimited Gauss linear 1;
    grad(k.b)        cellLimited Gauss linear 1;
    grad(omega.b)    cellLimited Gauss linear 1;
    {%else%}
    default     {{ gradSchemes }};
    {%endif%}
}

divSchemes
{
    {% if divSchemes == 'damBreak' %}
    div(rhoPhi,U)   Gauss linearUpwind grad(U);
    div(phi,alpha)  Gauss vanLeer;
    div(phirb,alpha) Gauss linear;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
    {% endif %}

    {% if divSchemes == 'waterChannel' %}
    default             none;

    div(rhoPhi,U)       Gauss linearUpwind grad(U);
    div(phi,alpha)      Gauss vanLeer;
    div(phirb,alpha)    Gauss linear;

    "div\(phi,(k|omega)\)"      Gauss upwind;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;

    div(phi,s)   Gauss vanLeer;
    div(phirb,s) Gauss linear;
    {%endif%}
    
    {% if divSchemes == '2DChannel' %}
    //    default         Gauss upwind phi;
        default         none;

    // alphaEqn
        div(phi,alpha)  Gauss limitedLinear01 1;
        div(phir,alpha) Gauss limitedLinear01 1;
    // UEqn
        div(phi.a,U.a)    Gauss limitedLinearV 1;
        div(phi.b,U.b)    Gauss limitedLinearV 1;
        div(phiRa,Ua)   Gauss limitedLinear 1;
        div(phiRb,Ub)   Gauss limitedLinear 1;
        div(Rca)        Gauss linear;
        div(Rcb)        Gauss linear;
    // pEqn
        div(alpha,nu) Gauss linear;
    // k and EpsilonEqn
        div(phi.b,k.b)     Gauss limitedLinear 1;
        div(phi.b,omega.b) Gauss limitedLinear 1;
        div(phi.b,epsilon.b) Gauss limitedLinear 1;
    // ThetaEqn
        div(phi,Theta)  Gauss limitedLinear 1;
    // alphaPlastic
        div(phia,alphaPlastic)    Gauss limitedLinear01 1;
    // pa
        div(phia,pa_new_value)     Gauss limitedLinear 1;
    {%endif%}

    {% if divSchemes == '2DPipelineScour' %}
    default         none;

// alphaEqn
    div(phi,alpha)  Gauss limitedLinear01 1;
    div(phir,alpha) Gauss limitedLinear01 1;
//    div(phi,alpha)   Gauss vanLeer;
//    div(phir,alpha)  Gauss vanLeer;
// UEqn
    div(phi.a,U.a)    Gauss linearUpwind grad(Ua);
    div(phi.b,U.b)    Gauss linearUpwind grad(Ub);
//    div(phi.a,U.a)    Gauss upwind phi;
//    div(phi.b,U.b)    Gauss upwind phi;
    div(phiRa,Ua)   Gauss linear;
    div(phiRb,Ub)   Gauss linear;
//    div(phiRa,Ua)   Gauss upwind phi;
//    div(phiRb,Ub)   Gauss upwind phi;
    div(Rca)        Gauss linear;
    div(Rcb)        Gauss linear;
// pEqn
    div(alpha,nu) Gauss linear;
// k and EpsilonEqn
    div(phi.b,k.b)     Gauss linearUpwind grad(k);
    div(phi.b,epsilon.b) Gauss linearUpwind grad(epsilon);
    div(phi.b,omega.b) Gauss linearUpwind grad(omega);
//    div(phi.b,k.b)     Gauss upwind phi;
//    div(phi.b,epsilon.b) Gauss upwind phi;
//    div(phi.b,omega.b) Gauss upwind phi;
// ThetaEqn
    div(phi,Theta)  Gauss limitedLinear 1;
// alphaPlastic
    div(phia,alphaPlastic)    Gauss upwind;
// pa
    div(phia,pa_new_value)    Gauss upwind; 
    {%endif%}
}

laplacianSchemes
{
    {% if laplacianSchemes == '2DChannel' %}
                default         none;
    // alphaEqn
        laplacian(alphaPpMag,alpha) Gauss linear corrected;
    // UEqn
        laplacian(nuEffa,U.a) Gauss linear corrected;
        laplacian(nuEffb,U.b) Gauss linear corrected;
        laplacian(nuFra,U.a)  Gauss linear corrected;
    // pEqn
        laplacian((rho*(1|A(U))),p_rbgh) Gauss linear corrected;
    // k and EpsilonEqn 
        laplacian(DkEff,k.b) Gauss linear corrected;
        laplacian(DkEff,beta) Gauss linear corrected;
        laplacian(DomegaEff,omega.b) Gauss linear corrected;
        laplacian(DepsilonEff,epsilon.b) Gauss linear corrected;
        laplacian(DepsilonEff,beta) Gauss linear corrected;
    //ThetaEqn
        laplacian(kappa,Theta) Gauss linear corrected;

    {%endif%}

    {% if laplacianSchemes == '2DPipelineScour' %}
    default         Gauss linear corrected;
// alphaEqn
    laplacian(alphaPpMag,alpha) Gauss linear corrected;
// UEqn
    laplacian(nuEffa,U.a) Gauss linear corrected;
    laplacian(nuEffb,U.b) Gauss linear corrected;
    laplacian(nuFra,U.a)  Gauss linear corrected;
// pEqn
    laplacian((rho*(1|A(U))),p) Gauss linear corrected;
// k and EpsilonEqn 
    laplacian(DkEff,k.b) Gauss linear corrected;
    laplacian(DkEff,beta) Gauss linear corrected;
    laplacian(DomegaEff,omega.b) Gauss linear corrected;
    laplacian(DepsilonEff,epsilon.b) Gauss linear corrected;
    laplacian(DepsilonEff,beta) Gauss linear corrected;
//ThetaEqn
    laplacian(kappa,Theta) Gauss linear corrected;
    {%endif%}

    {% if laplacianSchemes == 'Gauss linear' %}
        default     {{laplacianSchemes}} {{snGradSchemes}};
    {%endif%}

}

interpolationSchemes
{
    default     {{ interpolationSchemes }};
}

snGradSchemes
{
    default     {{ snGradSchemes }};
}

{% if wallDist is not none%}
wallDist
{
    method          {{wallDist[0]}};
}


{%endif%}

{% if laplacianSchemes == '2DChannel' or laplacianSchemes == '2DPipelineScour' %}
fluxRequired
{
    default     no;
    p_rbgh          ;
}


{%endif%}

{%if customContent is not none%}
{{customContent}}
{%endif%}