{# Plantilla Jinja2 para el archivo 'controlDict' de OpenFOAM #}

application     {{ application }};

startFrom       startTime;
startTime       {{ startTime }};

stopAt          endTime;
endTime         {{ endTime }};

deltaT          {{ deltaT }};

writeControl    runTime;
writeInterval   {{ writeInterval }};

{% if purgeWrite is not none %}
purgeWrite      {{purgeWrite}};
{% endif %}
{% if writeFormat is not none %}
writeFormat      {{writeFormat}};
{% endif %}

writePrecision  6;
writeCompression {{writeCompression}};

timeFormat      general;
timePrecision   6;

{% if runTimeModifiable is not none %}
runTimeModifiable      {{runTimeModifiable}};
{% endif %}
{% if adjustTimeStep is not none %}
adjustTimeStep      {{adjustTimeStep}};
{% endif %}
{% if maxCo is not none %}
maxCo      {{maxCo}};
{% endif %}
{% if maxAlphaCo is not none %}
maxAlphaCo      {{maxAlphaCo}};
{% endif %}
{% if maxAlphaCo is not none %}
maxDeltaT      {{maxDeltaT}};
{% endif %}

{%if functions == "damBreakOpenFoam"%}
functions
{
    sampleSets
    {
        type    sets;
        libs    (sampling);

        writeControl  timeStep;
        writeInterval 1;

        setFormat           vtk;
        interpolationScheme cellPointFace;

        fields ( alpha.water );

        sets
        {
            gauge_1
            {
                type    face;
                axis    y;
                start   (0.02 0.20 0.005);
                end     (0.02 0.25 0.005);
                nPoints 100;
            }

            gauge_2
            {
                type    face;
                axis    y;
                start   (0.2 0.03 0.005);
                end     (0.2 0.55 0.005);
                nPoints 100;
            }
        }
    }

}
{%endif%}

{%if functions == "waterChannelOpenFoam"%}
functions
{
    inletFlux
    {
        type            surfaceFieldValue;
        libs            (fieldFunctionObjects);
        writeControl    timeStep;
        log             true;
        // Output field values as well
        writeFields     false;
        regionType      patch;
        name            inlet;
        operation       sum;

        fields
        (
            rhoPhi
        );
    }

    outletFlux
    {
        $inletFlux;
        name            outlet;
    }

    atmosphereFlux
    {
        $inletFlux;
        name            atmosphere;
    }

    sTransport
    {
        type            scalarTransport;
        libs            (solverFunctionObjects);

        enabled         true;
        writeControl    writeTime;
        writeInterval   1;

        field           s;
        bounded01       false;
        phase           alpha.water;

        write           true;

        fvOptions
        {
            unitySource
            {
                type            scalarSemiImplicitSource;
                enabled         true;

                selectionMode   all;
                volumeMode      specific;

                sources
                {
                    s           (1 0);
                }
            }
        }

        resetOnStartUp  false;
    }
}


{%endif%}



{%if functions == "2DChannelSedFoam"%}
libs (
      "libgroovyBC.so"
      "libgroovyStandardBCs.so"
      "libWilcoxOmegaWallFunction.so"
     );
{%endif%}