import sys
import os
from PyQt6 import QtWidgets, QtCore  # O PySide2/PySide6
import pyvista as pv
from pyvistaqt import QtInteractor, MainWindow
import numpy as np

class MyMainWindow(MainWindow):
    def __init__(self, parent=None, show=True):
        super().__init__(parent)
        self.setWindowTitle("Visor de Mallas PyVista en PyQt")
        self.setGeometry(100, 100, 1000, 800) # Establecer tamaño inicial de la ventana

        # Crear el widget central
        central_widget = QtWidgets.QWidget()
        self.setCentralWidget(central_widget)

        # Crear un layout vertical para el widget central
        layout = QtWidgets.QVBoxLayout(central_widget)

        # Crear una instancia de QtInteractor (el widget de PyVista)
        # Puedes pasar 'self' como padre para que el widget se integre correctamente
        self.plotter = QtInteractor(self)
        layout.addWidget(self.plotter)

        # --- Configuración de PyVista ---

        # 1. Añadir el eje de coordenadas
        # Esto muestra un eje XYZ en la esquina inferior izquierda del plotter.
        self.plotter.show_axes()
        # try:
        mesh = pv.read("./interfaz/inlet/inlet_0.vtk") # Reemplaza con la ruta a tu archivo de malla
        # except Exception as e:
        #     print(f"Error al cargar la malla: {e}")
        #     print("Usando una malla de esfera de ejemplo en su lugar.")
        #     mesh = pv.Sphere(radius=1.0, phi_resolution=20, theta_resolution=20)

        mesh
        self.plotter.add_mesh(mesh, show_edges=True, color='lightgray') # Color de la malla

        # 3. Añadir etiquetas a cada cara de la malla
        # Calculamos los centroides de las celdas (caras/elementos)
        # cell_centroids = mesh.cell_centers().points
        
        # Creamos las etiquetas para cada cara (ej. "Cara 0", "Cara 1", etc.)
        # face_labels = [f"Cara {i}" for i in range(mesh.n_cells)]

        # Añadimos las etiquetas al plotter.
        # Considera que para mallas muy densas, esto puede ser muy lento
        # y las etiquetas pueden superponerse mucho.
        # self.plotter.add_point_labels(
        #     cell_centroids,
        #     face_labels,
        #     font_size=8,
        #     point_size=0, # No mostrar los puntos, solo las etiquetas
        #     always_visible=True, # Intentar que sean siempre visibles (puede no funcionar en mallas densas)
        #     show_points=False,
        #     render_points_as_spheres=False
        # )

        self.plotter.reset_camera() # Ajustar la cámara para ver toda la malla y las etiquetas

        # --- Elementos de la GUI de PyQt ---

        # Opcional: Añadir un botón para interacción
        button = QtWidgets.QPushButton("Resetear Cámara")
        button.clicked.connect(self.plotter.reset_camera)
        layout.addWidget(button)

        if show:
            self.show()

if __name__ == '__main__':
    # Es importante establecer la API de Qt si usas QtPy para asegurar la compatibilidad
    # con PyQt5, PyQt6, PySide2 o PySide6
    os.environ["QT_API"] = "pyqt5" # Cambia a "pyqt6", "pyside2", "pyside6" si usas otra

    app = QtWidgets.QApplication(sys.argv)
    window = MyMainWindow()
    sys.exit(app.exec_())
